
These are sprint 2023 notes:

- Cover math operators. There is a short set of lecture notes that aren't linked on Moodle. They need to be expanded and covered early in the course.


These were the notes made in 2022:

Syllabus: align the grade book on Moodle with the syllabus.

Re-order the topics like this:

1) HTML review / JavaScript intro
   - How JavaScript is different execution of statements
   - Don't use the console yet. Use script elements
2) the rest of the old week 1 content. Cover all math operators
3) Functions
4) Objects
5) Midterm
6) Selection
7) Strings / Arrays
8) Repetition (two weeks?)
9) Events / Dynamic web pages



Week 1, Intro
1) Introduce the concept of algorithms. Use an example like the Martian brushing teeth. Use loose pseudocode.
1b) Contrast HTML to JavaScript how are they different.
2) Introduce all the math operators including the short-cuts.
3) Show flowcharts.
Lab 1
1) Write some good variable exercises so students really get the idea of assignment and use of variables.
1.5) Update the datatypes to show 7 types: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#data_structures_and_types
2) Don't have them do a copy-paste exercise for part 1. Have them write fill-in the blank code in a web page.
3) Modify the lab assignment so that the concatenation doesn't require nested quotes so much. More emphasis on use of variables. Use template literals or at least footnote that they are preferred.
4) Use textContent instead of innerHTML. https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent. Better yet, just use document.write for now.
5) Show them how to use the console to check for syntax errors.


Week 2, Functions
1) Change the reading. 
EJS, Ch.2 Covers conditional operators and the ternary operator, but not functions. Ch. 3 covers functions, but in too much depth.
2) Don't assign reading or lecture on conditional operators this week. Save that for next week when you cover selection.
3 Don't use getElementById, use Document.write or textContent
https://developer.mozilla.org/en-US/docs/MDN/Guidelines/Code_guidelines/JavaScript#use_textcontent_not_innerhtml
4) Show them how to use the debugger in the browser.

Week 3, Selection
1) Introduce problem solving concepts. Novel solutions, not recipes.
2) Continue writing algorithms in loose pseudocode.
2.5) Show them how to make an IPO table especially for more complex decision making like the kindergarten start age example.
2.6) Show them how to extend the IPO chart to make a data table for testing: inputs vs. outputs, cover edge conditions.
3) Talk about how you learn to program--by doing. It's like learning a sport, or art, or music composition.
4) Show flowcharts.
5) Talk about types of errors: syntax, logic, and run time (crashes).
6) For lab 3, web app II, talk about arranging else if branches for "process of eliminiation" so you don't need to check both edges of a range in each if branch.
6b) For the beverage labeling problem clarify how there can be 100% fruit juice and no more than 4% sweetener when this adds up to as much as 104%
7) Fix the numbering of questions for lab 3, part 1. Make part 1 easier to grade.
8) Modify the notes on switch statements to say that the argument to switch is an expression, not just a variable. 
The case labels can also be expressions. See this article on switch(true):
https://seanbarry.dev/posts/switch-true-pattern

Week 4, Repetition
1) Maybe reorganize the topic sequence and cover arrays first.
2) Continue writing algorithms in pseudocode.
3) Show flowcharts
Lab: 
1) For Web app 2, they should all get two inputs (like Kindergarten Admission) and require validation of both.
2) Revise the grading criteria to be more relevant (look at the code review). Less points for Web app 2 and 3 .js code.

Week 5, Midterm

Week 6, Arrays
1) Explain and give an example of parallel arrays.
2) Explain and give an example of a look-up array.

Week 8, Events
Modify lab 7, web app 2 so that the quiz app problem's solution isn't just a matter of using the example quiz as a template.
